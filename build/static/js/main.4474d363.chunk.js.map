{"version":3,"sources":["Dash.js","Video.js","Expired.js","App.js","reportWebVitals.js","index.js"],"names":["Dash","_useState","useState","meeting01","window","location","origin","Date","toISOString","meeting02","meeting03","meeting04","_useState2","_slicedToArray","meetingUrls","console","log","handleMeetingClick","meetingKey","href","_jsxs","className","children","_jsx","onClick","Video","_useParams","useParams","id","user","time","doctorJoined","setDoctorJoined","_useState3","_useState4","patientJoined","setPatientJoined","useEffect","name","currentTime","getTime","meetingTime","config","meetingId","apiKey","process","region","containerId","redirectOnLeave","micEnabled","webcamEnabled","participantCanToggleSelfWebcam","participantCanToggleSelfMic","participantCanLeave","chatEnabled","screenShareEnabled","pollEnabled","whiteboardEnabled","raiseHandEnabled","layout","type","priority","branding","enabled","logoURL","poweredBy","permissions","pin","askToJoin","toggleParticipantMic","toggleParticipantWebcam","toggleVirtualBackground","drawOnWhiteboard","toggleWhiteboard","toggleRecording","toggleLivestream","removeParticipant","endMeeting","changeLayout","waitingScreen","imageUrl","text","joinScreen","visible","title","meetingUrl","leftScreen","actionButton","label","rejoinButtonEnabled","theme","notificationSoundEnabled","debug","maxResolution","VideoSDKMeeting","init","reminderTimer","expiration","reminderDelay","setTimeout","alert","refreshAfterTimeSlot","reload","clearTimeout","LinkExpired","Link","to","App","Router","Routes","Route","path","element","Expired","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"+QA+CeA,EA3CF,WACT,IAAAC,EAAsCC,mBAAS,CAC3CC,UAAWC,OAAOC,SAASC,OAAS,2BAA4B,IAAIC,MAAOC,cAC3EC,UAAWL,OAAOC,SAASC,OAAS,wBAAyB,IAAIC,MAAOC,cACxEE,UAAWN,OAAOC,SAASC,OAAS,2BAA4B,IAAIC,MAAOC,cAC3EG,UAAWP,OAAOC,SAASC,OAAS,wBAAyB,IAAIC,MAAOC,gBAC1EI,EAAAC,YAAAZ,EAAA,GALKa,EAAWF,EAAA,GAAgBA,EAAA,GAOlCG,QAAQC,IAAIZ,OAAOC,SAASC,QAE5B,IAAMW,EAAqB,SAACC,GACxBd,OAAOC,SAASc,KAAOL,EAAYI,EACvC,EAEA,OACIE,eAAA,OAAKC,UAAU,sBAAqBC,SAAA,CAChCC,cAAA,MAAAD,SAAI,cACJF,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC1BF,eAAA,OAAKC,UAAU,eAAcC,SAAA,CACzBC,cAAA,MAAAD,SAAI,eACJC,cAAA,KAAAD,SAAG,uBACHC,cAAA,UAAQC,QAAS,kBAAMP,EAAmB,YAAY,EAACK,SAAC,YAE5DF,eAAA,OAAKC,UAAU,eAAcC,SAAA,CACzBC,cAAA,MAAAD,SAAI,eACJC,cAAA,KAAAD,SAAG,UACHC,cAAA,UAAQC,QAAS,kBAAMP,EAAmB,YAAY,EAACK,SAAC,YAE5DF,eAAA,OAAKC,UAAU,eAAcC,SAAA,CACzBC,cAAA,MAAAD,SAAI,eACJC,cAAA,KAAAD,SAAG,uBACHC,cAAA,UAAQC,QAAS,kBAAMP,EAAmB,YAAY,EAACK,SAAC,YAE5DF,eAAA,OAAKC,UAAU,eAAcC,SAAA,CACzBC,cAAA,MAAAD,SAAI,eACJC,cAAA,KAAAD,SAAG,SACHC,cAAA,UAAQC,QAAS,kBAAMP,EAAmB,YAAY,EAACK,SAAC,iBAK5E,E,QCzCe,SAASG,IAEpB,IAAAC,EAA2BC,cAAnBC,EAAEF,EAAFE,GAAIC,EAAIH,EAAJG,KAAMC,EAAIJ,EAAJI,KAIlB7B,EAAwCC,oBAAS,GAAMU,EAAAC,YAAAZ,EAAA,GAAhD8B,EAAYnB,EAAA,GAAEoB,EAAepB,EAAA,GACpCqB,EAA0C/B,oBAAS,GAAMgC,EAAArB,YAAAoB,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAwJtC,OApJAG,qBAAU,WACN,IACMC,EAAOT,EAEPU,GAAc,IAAIhC,MAAOiC,UACzBC,EAAc,IAAIlC,KAAKuB,GAAMU,UAKnC,GAJAzB,QAAQC,IAAI,iBAAkBuB,GAC9BxB,QAAQC,IAAI,iBAAkByB,GAG1BF,EAAcE,GAAe,IAG7B,OAFA1B,QAAQC,IAAI,0BACZZ,OAAOC,SAASc,KAAOf,OAAOC,SAASC,OAAS,iBAMvC,WAATuB,EACAG,GAAgB,GAEhBI,GAAiB,GAIrB,IAAMM,EAAS,CACXJ,KAAMA,EACNK,UAAWf,EACXgB,OA3BWC,uCA6BXC,OAAQ,QAERC,YAAa,KACbC,gBAAiB5C,OAAOC,SAASC,OAAS,IAE1C2C,YAAY,EACZC,eAAe,EACfC,gCAAgC,EAChCC,6BAA6B,EAC7BC,qBAAqB,EAErBC,aAAa,EACbC,oBAAoB,EACpBC,aAAa,EACbC,mBAAmB,EACnBC,kBAAkB,EAGlBC,OAAQ,CACJC,KAAM,YACNC,SAAU,OAIdC,SAAU,CACNC,SAAS,EACTC,QACI,GACJ1B,KAAM,WACN2B,WAAW,GAGfC,YAAa,CACTC,KAAK,EACLC,WAAW,EACXC,sBAAsB,EACtBC,yBAAyB,EACzBC,yBAAyB,EACzBC,kBAAkB,EAClBC,kBAAkB,EAClBC,iBAAiB,EACjBC,kBAAkB,EAClBC,kBAA4B,WAAT/C,EACnBgD,WAAqB,WAAThD,EACZiD,cAAc,GAGlBC,cAAe,CACXC,SAAU,GACVC,KAAM,gCAGVC,WAAY,CACRC,SAAS,EACTC,MAAO,0BACPC,WAAYjF,OAAOC,SAASC,OAAS,YAAcsB,EAAK,IAAMC,EAAO,IAAMC,GAG/EwD,WAAY,CAERC,aAAc,CAEVC,MAAO,YACPrE,KAAMf,OAAOC,SAASC,OAAS,KAGnCmF,qBAAqB,GAGzBC,MAAO,UACPC,0BAA0B,EAE1BC,OAAO,EAGPC,cAAe,OAKH,IAAIC,mBACZC,KAAKrD,GAEb,IAAIsD,EAAgB,KAGpB,GAFAjF,QAAQC,IAAIe,EAAcI,GAEtBJ,GAAgBI,EAAe,CAE/B,IAAM8D,EAAe,IAAiBxD,EAAeF,EAC/C2D,EAAkB,KAAiBzD,EAAeF,EAEpD2D,EAAgB,IAChBF,EAAgBG,YAAW,WACnBpE,IAAiBI,GACjBpB,QAAQC,IAAI,6DACZoF,MAAM,oCACErE,GAAgBI,IACxBpB,QAAQC,IAAI,6DACZoF,MAAM,iCAEd,GAAGF,IAKP,IAAMG,EAAuBF,YAAW,WACpC/F,OAAOC,SAASiG,QACpB,GAAGL,GAEH,OAAO,WACHM,aAAaP,GACbO,aAAaF,EACjB,CACJ,CAGJ,GAAG,CAACzE,EAAIC,EAAMC,EAAMC,EAAcI,IAE3BZ,cAAA,SACX,C,UCpJeiF,EAZK,WAGhB,OACIpF,eAAA,OAAKC,UAAU,yBAAwBC,SAAA,CACnCC,cAAA,MAAAD,SAAI,oBACJC,cAAA,KAAAD,SAAG,uCACHC,cAACkF,IAAI,CAACC,GAAG,IAAIrF,UAAU,WAAUC,SAAC,iBAG9C,ECMeqF,MAdf,WAGE,OACEpF,cAACqF,IAAM,CAAAtF,SACLF,eAACyF,IAAM,CAAAvF,SAAA,CACLC,cAACuF,IAAK,CAACC,KAAK,IAAIC,QAASzF,cAACvB,EAAI,MAC9BuB,cAACuF,IAAK,CAACC,KAAK,gBAAgBC,QAASzF,cAAC0F,EAAO,MAC7C1F,cAACuF,IAAK,CAACC,KAAK,2BAA2BC,QAASzF,cAACE,EAAK,UAI9D,ECNeyF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EACV,GAEJ,ECJAS,IAASC,OACPtG,cAACuG,IAAMC,WAAU,CAAAzG,SACfC,cAACoF,EAAG,MAENqB,SAASC,eAAe,SAM1Bf,G","file":"static/js/main.4474d363.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useState } from 'react';\r\nimport './Dash.css'; // Import the CSS file for styling\r\n\r\nconst Dash = () => {\r\n    const [meetingUrls, setMeetingUrls] = useState({\r\n        meeting01: window.location.origin + \"/meeting/01/counsellor/\" + new Date().toISOString(),\r\n        meeting02: window.location.origin + \"/meeting/01/patient/\" + new Date().toISOString(),\r\n        meeting03: window.location.origin + \"/meeting/02/counsellor/\" + new Date().toISOString(),\r\n        meeting04: window.location.origin + \"/meeting/02/patient/\" + new Date().toISOString(),\r\n    });\r\n\r\n    console.log(window.location.origin);\r\n\r\n    const handleMeetingClick = (meetingKey) => {\r\n        window.location.href = meetingUrls[meetingKey];\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard-container\">\r\n            <h1>Dashboard</h1>\r\n            <div className=\"meeting-cards\">\r\n                <div className=\"meeting-card\">\r\n                    <h2>Meeting 01</h2>\r\n                    <p>Join as Counsellor</p>\r\n                    <button onClick={() => handleMeetingClick(\"meeting01\")}>Join</button>\r\n                </div>\r\n                <div className=\"meeting-card\">\r\n                    <h2>Meeting 01</h2>\r\n                    <p>Join </p>\r\n                    <button onClick={() => handleMeetingClick(\"meeting02\")}>Join</button>\r\n                </div>\r\n                <div className=\"meeting-card\">\r\n                    <h2>Meeting 02</h2>\r\n                    <p>Join as Counsellor</p>\r\n                    <button onClick={() => handleMeetingClick(\"meeting03\")}>Join</button>\r\n                </div>\r\n                <div className=\"meeting-card\">\r\n                    <h2>Meeting 02</h2>\r\n                    <p>Join</p>\r\n                    <button onClick={() => handleMeetingClick(\"meeting04\")}>Join</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dash;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { VideoSDKMeeting } from \"@videosdk.live/rtc-js-prebuilt\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function Video() {\r\n\r\n    const { id, user, time } = useParams();\r\n    // before using these params directly get the same values form DB which when sceduling stored and compare this URL is valid\r\n    // time param should reflect meeting start time\r\n\r\n    const [doctorJoined, setDoctorJoined] = useState(false);\r\n    const [patientJoined, setPatientJoined] = useState(false);\r\n\r\n    // when checking user doctor or patient as any one can change the url and join, implemenet a way to confirm users identity( can use the auth state as it has the role)\r\n    // need to check if the meeting is sceduled or not, should maintain a flag when scheduling, before passing to use effect, if that a invalid url this should be denied\r\n    useEffect(() => {\r\n        const apiKey = process.env.REACT_APP_VIDEOSDK_API_KEY;\r\n        const name = user;\r\n\r\n        const currentTime = new Date().getTime();\r\n        const meetingTime = new Date(time).getTime();\r\n        console.log(\"current time: \", currentTime);\r\n        console.log(\"meeting time: \", meetingTime);\r\n\r\n        // after 30 mins of meeting time, link will expire\r\n        if (currentTime - meetingTime >= 5 * 60 * 1000) {\r\n            console.log(\"Link has expired.\"); // need to route or display meeting expired page or component\r\n            window.location.href = window.location.origin + '/link-expired';\r\n            return;\r\n        }\r\n\r\n        // to confirm doctor or patient has joined the meeting\r\n        // need to save this to DB\r\n        if (user === \"doctor\") {\r\n            setDoctorJoined(true);\r\n        } else {\r\n            setPatientJoined(true);\r\n        }\r\n\r\n\r\n        const config = {\r\n            name: name,\r\n            meetingId: id, // from this it differentiate meetings\r\n            apiKey: apiKey,\r\n\r\n            region: \"sg001\", // region for new meeting\r\n\r\n            containerId: null,\r\n            redirectOnLeave: window.location.origin + \"/\",\r\n\r\n            micEnabled: false,\r\n            webcamEnabled: false,\r\n            participantCanToggleSelfWebcam: true,\r\n            participantCanToggleSelfMic: true,\r\n            participantCanLeave: true, // if false, leave button won't be visible\r\n\r\n            chatEnabled: true,\r\n            screenShareEnabled: true,\r\n            pollEnabled: false,\r\n            whiteboardEnabled: false,\r\n            raiseHandEnabled: true,\r\n\r\n\r\n            layout: {\r\n                type: \"SPOTLIGHT\", // \"SPOTLIGHT\" | \"SIDEBAR\" | \"GRID\"\r\n                priority: \"PIN\", // \"SPEAKER\" | \"PIN\",\r\n                // gridSize: 3,\r\n            },\r\n\r\n            branding: {\r\n                enabled: false,\r\n                logoURL:\r\n                    \"\",\r\n                name: \"MindTalk\",\r\n                poweredBy: false,\r\n            },\r\n\r\n            permissions: {\r\n                pin: true,\r\n                askToJoin: false, // Ask joined participants for entry in meeting\r\n                toggleParticipantMic: true, // Can toggle other participant's mic\r\n                toggleParticipantWebcam: true, // Can toggle other participant's webcam\r\n                toggleVirtualBackground: true, // Can toggle virtual background\r\n                drawOnWhiteboard: false, // Can draw on whiteboard\r\n                toggleWhiteboard: false, // Can toggle whiteboard\r\n                toggleRecording: false, // Can toggle meeting recording\r\n                toggleLivestream: false, //can toggle live stream\r\n                removeParticipant: user === \"doctor\" ? true : false, // Can remove participant\r\n                endMeeting: user === \"doctor\" ? true : false, // Can end meeting\r\n                changeLayout: true, //can change layout\r\n            },\r\n\r\n            waitingScreen: {\r\n                imageUrl: \"\",\r\n                text: \"Connecting to the meeting...\",\r\n            },\r\n\r\n            joinScreen: {\r\n                visible: true, // Show the join screen ?\r\n                title: \"Medical Conference Room\", // Meeting title\r\n                meetingUrl: window.location.origin + \"/meeting/\" + id + \"/\" + user + \"/\" + time, // Meeting joining url\r\n            },\r\n\r\n            leftScreen: {\r\n                // visible when redirect on leave not provieded\r\n                actionButton: {\r\n                    // optional action button\r\n                    label: \"DashBoard\", // action button label\r\n                    href: window.location.origin + \"/\", // action button href\r\n\r\n                },\r\n                rejoinButtonEnabled: false, // show rejoin button\r\n            },\r\n\r\n            theme: \"DEFAULT\", // DARK || LIGHT || DEFAULT\r\n            notificationSoundEnabled: true,\r\n\r\n            debug: true, // pop up error during invalid config or netwrok error\r\n\r\n\r\n            maxResolution: \"sd\", // \"hd\" or \"sd\"\r\n\r\n            // For more features check: /prebuilt/guide/prebuilt-video-and-audio-calling/getting-started\r\n        };\r\n\r\n        const meeting = new VideoSDKMeeting();\r\n        meeting.init(config);\r\n\r\n        let reminderTimer = null;\r\n        console.log(doctorJoined, patientJoined);\r\n\r\n        if (doctorJoined || patientJoined) {\r\n\r\n            const expiration = ((5 * 60 * 1000) + meetingTime) - currentTime;\r\n            const reminderDelay = ((2 * 60 * 1000) + meetingTime) - currentTime;\r\n\r\n            if (reminderDelay > 0) {\r\n                reminderTimer = setTimeout(() => {\r\n                    if (doctorJoined && !patientJoined) {\r\n                        console.log(\"Patient ID:01, please join the meeting, Docotr is waiting\"); // need to send sms to patient\r\n                        alert(\"Sent A Reminder msg to Patient\");\r\n                    } else if (!doctorJoined && patientJoined) {\r\n                        console.log(\"Doctor ID:01, please join the meeting, Patient is waiting\"); // need to send sms to doctor\r\n                        alert(\"Sent A Reminder msg to Doctor\");\r\n                    }\r\n                }, reminderDelay);\r\n            }\r\n\r\n\r\n            // after 30 mins automaticaly page will be refreshed and participant wont be able to use that link again\r\n            const refreshAfterTimeSlot = setTimeout(() => {\r\n                window.location.reload();\r\n            }, expiration);\r\n\r\n            return () => {\r\n                clearTimeout(reminderTimer);\r\n                clearTimeout(refreshAfterTimeSlot);\r\n            };\r\n        }\r\n\r\n\r\n    }, [id, user, time, doctorJoined, patientJoined]);\r\n\r\n    return <div></div>;\r\n}\r\n","import React from 'react';\r\nimport './LinkExpired.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LinkExpired = () => {\r\n\r\n\r\n    return (\r\n        <div className=\"link-expired-container\">\r\n            <h1>Meeting Expired</h1>\r\n            <p>The Meeting Scheduled Has Expired.</p>\r\n            <Link to=\"/\" className=\"home-btn\">Go to Home</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LinkExpired;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport Dash from \"./Dash\";\r\nimport Video from \"./Video\";\r\nimport Expired from \"./Expired\";\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Dash />} />\r\n        <Route path=\"/link-expired\" element={<Expired />} />\r\n        <Route path=\"/meeting/:id/:user/:time\" element={<Video />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}